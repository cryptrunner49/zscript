// Define an Info struct with default values (literals only)
struct Info {
    id = 999;       // Numeric default
    tag = "none";   // String default
    count = 1       // Numeric default
}

// Define a Vec struct with default values (literals only)
struct Vec {
    x = 100;        // Numeric default
    y = 500;        // Numeric default
    name = "default"; // String default
}

// Create two Vec instances with nested structs
var v1 = Vec();
v1.x = 10;
v1.y = 20;
v1.name = "hello";
v1.nestedVec = Vec();
v1.nestedVec.x = 5;
v1.nestedVec.y = 2;
v1.nestedVec.name = "inner";
v1.nestedVec.nestedVec = Vec();
v1.nestedVec.nestedVec.x = 1;
v1.nestedVec.info = Info();
v1.nestedVec.info.id = 100;
v1.nestedVec.info.tag = "a";
v1.nestedVec.info.count = 3;
v1.info = Info();
v1.info.id = 1;
v1.info.tag = "start";
v1.info.count = 10;

var v2 = Vec();
v2.x = 5;
v2.y = 8;
v2.name = "world";
v2.nestedVec = Vec();
v2.nestedVec.x = 3;
v2.nestedVec.y = 1;
v2.nestedVec.name = "test";
v2.nestedVec.nestedVec = Vec();
v2.nestedVec.nestedVec.x = 2;
v2.nestedVec.info = Info();
v2.nestedVec.info.id = 200;
v2.nestedVec.info.tag = "b";
v2.nestedVec.info.count = 2;
v2.info = Info();
v2.info.id = 2;
v2.info.tag = "end";
v2.info.count = 5;

// Test addition
var sum = v1 + v2;
println("v1 + v2 = ");
println(sum);

// Test subtraction
var diff = v1 - v2;
println("v1 - v2 = ");
println(diff);

// Test with a partially initialized instance
var v3 = Vec();
v3.x = 7;
v3.y = 3;
v3.name = "test";
v3.info = Info();
v3.info.id = 3;
v3.info.tag = "mid";

var sum2 = v1 + v3;
println("v1 + v3 (with partial nesting) = ");
println(sum2);