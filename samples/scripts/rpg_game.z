// RPG Game in ZScript

struct Player:
    name = ""
    class = ""
    health = 0
    maxHealth = 0
    attack = 0
    defense = 0
    level = 1
    xp = 0
    inventory = null

struct Enemy:
    name = ""
    health = 0
    attack = 0
    defense = 0
    xpReward = 0

var enemies = {
    "Wolf": {
        "health": 30,
        "attack": 5,
        "defense": 2,
        "xpReward": 20
    },
    "Bear": {
        "health": 50,
        "attack": 10,
        "defense": 5,
        "xpReward": 50
    },
    "Dragon": {
        "health": 140,
        "attack": 18,
        "defense": 10,
        "xpReward": 200
    }
}

var locations = {
    "Town": {
        "description": "A peaceful town.",
        "actions": ["Go to Forest", "Go to Cave", "Rest"],
        "enemies": [],
        "items": []
    },
    "Forest": {
        "description": "A dense forest teeming with wild animals.",
        "actions": ["Go to Town", "Fight Enemy"],
        "enemies": ["Wolf", "Bear"],
        "items": ["Health Potion"]
    },
    "Cave": {
        "description": "A dark cave where a fearsome dragon dwells.",
        "actions": ["Go to Town", "Fight Dragon"],
        "enemies": ["Dragon"],
        "items": []
    }
}

// Check if player has enough XP to level up and update stats
func check_level_up(player):
    while (player.xp >= 100):
        player.level = player.level + 1
        player.maxHealth = player.maxHealth + 10
        player.health = player.maxHealth
        player.attack = player.attack + 2
        player.defense = player.defense + 1
        player.xp = player.xp - 100
        println("You leveled up to level " + to_str(player.level) + "!")

func create_enemy(enemyName):
    var enemy = Enemy()
    enemy.name = enemyName
    var enemyStats = enemies[enemyName]
    enemy.health = enemyStats["health"]
    enemy.attack = enemyStats["attack"]
    enemy.defense = enemyStats["defense"]
    enemy.xpReward = enemyStats["xpReward"]
    return enemy

// Handle combat between player and enemy, returning true if player survives
func combat(player, enemy):
    println("You are fighting a " + enemy.name + ".")
    while (player.health > 0 and enemy.health > 0):
        println("Your health: " + to_str(player.health) + "/" + to_str(player.maxHealth))
        println("Enemy health: " + to_str(enemy.health))
        println("1. Attack")
        println("2. Use Item")
        var validChoice = false
        while (!validChoice):
            var choice = scanln()
            if (choice == "1"):
                var damage = player.attack - enemy.defense
                if (damage < 1):
                    damage = 1
                enemy.health = enemy.health - damage
                println("You dealt " + to_str(damage) + " damage to the enemy.")
                validChoice = true
            | (choice == "2"):
                if (len(player.inventory) > 0):
                    println("Your inventory:")
                    for (var i = 0; i < len(player.inventory); i++):
                        println(to_str(i + 1) + ". " + player.inventory[i])
                    println("Choose an item to use (number):")
                    var itemValid = false
                    while (!itemValid):
                        var itemChoice = scanln()
                        var itemIndex = parse_int(itemChoice)
                        if (get_runtype(itemIndex) == "number" and itemIndex >= 1 and itemIndex <= len(player.inventory)):
                            var adjustedIndex = itemIndex - 1 // Convert 1-based item selection to 0-based inventory index
                            var item = player.inventory[adjustedIndex]
                            if (item == "Health Potion"):
                                player.health = player.health + 20
                                if (player.health > player.maxHealth):
                                    player.health = player.maxHealth
                                array_remove(player.inventory, item)
                                println("You used a Health Potion and restored 20 health.")
                                itemValid = true
                            else:
                                println("Unknown item. Please select a valid item.")
                        else:
                            println("Invalid choice. Please select a valid item number.")
                else:
                    println("You have no items.")
                validChoice = true
            else:
                println("Invalid choice. Please select 1 or 2.")
        if (enemy.health > 0):
            var damage = enemy.attack - player.defense
            if (damage < 1):
                damage = 1
            player.health = player.health - damage
            println("The enemy dealt " + to_str(damage) + " damage to you.")
    return player.health > 0

func create_player():
    var player = Player()
    // Prompt user for a non-empty name and validate input
    while (true):
        println("Enter your name:")
        player.name = scanln()
        if (str_length(player.name) > 0):
            break
        else:
            println("Name cannot be empty.")
    // Handle class selection with validation and retry for invalid inputs
    var validClass = false
    while (!validClass):
        println("Choose your class: 1. Warrior 2. Mage 3. Archer")
        var classChoice = scanln()
        if (classChoice == "1"):
            player.class = "Warrior"
            player.health = 120
            player.maxHealth = 120
            player.attack = 12
            player.defense = 8
            validClass = true
        | (classChoice == "2"):
            player.class = "Mage"
            player.health = 80
            player.maxHealth = 80
            player.attack = 15
            player.defense = 3
            validClass = true
        | (classChoice == "3"):
            player.class = "Archer"
            player.health = 100
            player.maxHealth = 100
            player.attack = 10
            player.defense = 5
            validClass = true
        else:
            println("Invalid option. Please choose 1, 2, or 3.")
    player.inventory = []
    return player

// Manage combat at a location, including enemy selection and post-combat rewards
func handle_combat(player, location):
    if (len(location["enemies"]) > 0):
        var enemyName = location["enemies"][random_between(0, len(location["enemies"])-1)]
        var enemy = create_enemy(enemyName)
        var victory = combat(player, enemy)
        if (!victory):
            return false
        player.xp = player.xp + enemy.xpReward
        println("You gained " + to_str(enemy.xpReward) + " XP!")
        check_level_up(player)
        if (random_between(1, 100) <= 30):
            push(player.inventory, "Health Potion")
            println("You found a Health Potion!")
    else:
        println("There are no enemies here.")
    return true

// Main game loop, handling player actions and game state
func main():
    println("Welcome to the RPG Adventure!")
    println("You are a hero destined to defeat the Dragon in the Cave.")
    println("Explore, fight, and grow stronger to save the land!")
    
    var player = create_player()
    var currentLocation = "Town"
    var gameOver = false
    
    while (player.health > 0 and !gameOver):
        var location = locations[currentLocation]
        println("\n" + location["description"])
        println("What do you want to do?")
        for (var i = 0; i < len(location["actions"]); i++):
            println(to_str(i + 1) + ". " + location["actions"][i])
        var validChoice = false
        while (!validChoice):
            var choice = scanln()
            var actionIndex = parse_int(choice)
            if (get_runtype(actionIndex) == "number" and actionIndex >= 1 and actionIndex <= len(location["actions"])):
                var adjustedIndex = actionIndex - 1 // Convert 1-based user input to 0-based array index
                var action = location["actions"][adjustedIndex]
                validChoice = true
                if (action == "Go to Forest"):
                    currentLocation = "Forest"
                | (action == "Go to Cave"):
                    currentLocation = "Cave"
                | (action == "Go to Town"):
                    currentLocation = "Town"
                | (action == "Rest"):
                    player.health = player.maxHealth
                    println("You rested and restored your health to full.")
                | (action == "Fight Enemy"):
                    if (!handle_combat(player, location)):
                        gameOver = true
                | (action == "Fight Dragon"):
                    var enemy = create_enemy("Dragon")
                    var victory = combat(player, enemy)
                    if (!victory):
                        gameOver = true
                        println("You were defeated by the Dragon. Game over.")
                    else:
                        println("Congratulations! You defeated the Dragon and saved the land!")
                        gameOver = true
            else:
                println("Invalid choice. Please select a valid option.")
    
    if (player.health <= 0):
        println("Better luck next time!")
    else:
        println("Thanks for playing!")

main()